name: Push Services to Develop
on:
  push:
    branches: 
      - develop
    paths:
      - 'services/**'

jobs:

  build_holder:
    name: 'Build Holder Service'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2  
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - './services/holder/**'          
      - name: Build service
        if: steps.changes.outputs.src == 'true'
        uses: ./.github/actions/build_service
        id: builder
        with:
          context: './services/holder'
          image_name: ${{ github.repository_owner}}/holder_image
          registry: ghcr.io
          registry_username: ${{ github.actor}}          
          registry_password: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}
      image_version: ${{ steps.builder.outputs.image_version }}
      buildtime: ${{ steps.builder.outputs.buildtime }}

  build_verifier:
    name: 'Build Verifier Service'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2  
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - './services/verifier/**'          
      - name: Build service
        if: steps.changes.outputs.src == 'true'
        uses: ./.github/actions/build_service
        id: builder
        with:
          context: './services/verifier'
          image_name: ${{ github.repository_owner}}/verifier_image
          registry: ghcr.io
          registry_username: ${{ github.actor}}          
          registry_password: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}
      image_version: ${{ steps.builder.outputs.image_version }}
      buildtime: ${{ steps.builder.outputs.buildtime }}

  update_manifest:
    name: Update manifests
    runs-on: ubuntu-20.04
    needs: 
      - build_holder
      - build_verifier
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    
    steps:  

      - name: Check out manifest repo
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}
          repository: ${{ secrets.MANIFEST_REPO }}

      - name: Set up git
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update holder image
        shell: bash
        if: needs.build_holder.outputs.image_tag != null
        run: |
          yq eval '.holder.image.tag = "${{ needs.build_holder.outputs.image_tag }}"' -i values-dev.yaml

      - name: Update verifier image
        shell: bash
        if: needs.build_verifier.outputs.image_tag != null
        run: |
          yq eval '.verifier.image.tag = "${{ needs.build_verifier.outputs.image_tag }}"' -i values-dev.yaml

      - name: Push config changes
        shell: bash
        run: |
          git commit -am "Update manifests for dev"
          git push origin




