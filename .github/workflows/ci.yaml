name: CI

on:

  push:
    branches: 
      - develop

    tags:
      - 'v*'
  
  pull_request:
    branches:
      - develop
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
    
  init:
    runs-on: ubuntu-20.04
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
      CI_IMAGE_SHA: ${GITHUB_SHA::7}
      CI_IS_PREVIEW: ${{ github.event_name == 'pull_request' }}
      CI_IS_RELEASE: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      CI_IS_DEV: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v') }}
      CI_IS_TEST: false
      CI_IS_PROD: false
      CI_VERSION: ''
      CI_PRERELEASE: ''
      CI_BUILD: ''
    steps:
      - name: Parse semver string
        if: ${{ fromJSON(env.CI_IS_RELEASE) }}
        continue-on-error: true
        id: semver_parser 
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: '\/v(.*)$'   

      - name: set version tag
        if: ${{ steps.semver_parser.outputs.fullversion != null }}
        run: |
          echo "CI_VERSION=${{ steps.semver_parser.outputs.major }}.${{ steps.semver_parser.outputs.minor }}.${{ steps.semver_parser.outputs.patch }}" >> $GITHUB_ENV
          echo "CI_IS_PROD=${{ steps.semver_parser.outputs.prerelease == null }}" >> $GITHUB_ENV
          echo "CI_IS_TEST=${{ steps.semver_parser.outputs.prerelease != null }}" >> $GITHUB_ENV
          echo "CI_PRERELEASE=${{ steps.semver_parser.outputs.prerelease }}" >> $GITHUB_ENV
          echo "CI_BUILD=${{ steps.semver_parser.outputs.build }}" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "CI_IMAGE_SHA: ${{ env.CI_IMAGE_SHA }}"
          echo "CI_IS_PREVIEW: ${{ env.CI_IS_PREVIEW }}"  
          echo "CI_IS_RELEASE: ${{ env.CI_IS_RELEASE }}"
          echo "CI_IS_DEV: ${{ env.CI_IS_DEV }}"  
          echo "CI_IS_TEST: ${{ env.CI_IS_TEST }}"  
          echo "CI_IS_PROD: ${{ env.CI_IS_PROD }}"  
          echo "CI_VERSION: ${{ env.CI_VERSION }}"  
          echo "CI_PRERELEASE: ${{ env.CI_PRERELEASE }}"  
          echo "CI_BUILD: ${{ env.CI_BUILD }}" 
          echo "${{ github.repository }}" 

    outputs:
      image_sha: ${{ env.CI_IMAGE_SHA }}
      is_preview: ${{ env.CI_IS_PREVIEW }}
      is_release: ${{ env.CI_IS_RELEASE }}
      is_dev: ${{ env.CI_IS_DEV }}
      is_test: ${{ env.CI_IS_TEST }}
      is_prod: ${{ env.CI_IS_PROD }}
      version_no: ${{ env.CI_VERSION }}
      prerelease: ${{ env.CI_PRERELEASE }}
      build_no: ${{ env.CI_BUILD }}

  build_holder:
    uses: "${{ github.repository }}/.github/workflows/build_service.yaml@develop"
    needs: init
    if: ${{ fromJSON(needs.init.outputs.is_dev) || fromJSON(needs.init.outputs.is_preview) }}
    with:
      context: './services/holder'
      image_name: "${{ github.repository }}/traction-holder"
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}


  echo:
    runs-on: ubuntu-20.04
    needs: init
    steps:
      - name: echo outputs
        run: |
            echo "image_sha ${{needs.init.outputs.image_sha }}"
            echo "is_preview ${{needs.init.outputs.is_preview }}"
            echo "is_release ${{needs.init.outputs.is_release }}"
            echo "is_dev ${{needs.init.outputs.is_dev }}"
            echo "is_test ${{needs.init.outputs.is_test }}"
            echo "is_prod ${{needs.init.outputs.is_prod }}"
            echo "version_no ${{needs.init.outputs.version_no }}"
            echo "prerelease ${{needs.init.outputs.prerelease }}"
            echo "build_no ${{needs.init.outputs.build_no }}"

      - name: is preview
        if: ${{ fromJSON(needs.init.outputs.is_preview) }}
        run: echo "is_preview... yes"

      - name: is release
        if: ${{ fromJSON(needs.init.outputs.is_preview) }}
        run: echo "is_release... yes"

      - name: is dev
        if: ${{ fromJSON(needs.init.outputs.is_dev) }}
        run: echo "is_dev... yes"

      - name: is test
        if: ${{ fromJSON(needs.init.outputs.is_test) }}
        run: echo "is_test... yes"

      - name: is prod
        if: ${{ fromJSON(needs.init.outputs.is_prod) }}
        run: echo "is_test... yes"




