name: CI

on:

  push:
    branches: 
      - develop

    tags:
      - 'v*'
  
  pull_request:
    branches:
      - develop
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
    
  init:
    runs-on: ubuntu-20.04
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
      CI_IMAGE_SHA: ''
      CI_IS_PREVIEW: ${{ github.event_name == 'pull_request' }}
      CI_IS_RELEASE: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      CI_IS_DEV: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v') }}
      CI_IS_TEST: false
      CI_IS_PROD: false
      CI_VERSION: ''
      CI_PRERELEASE: ''
      CI_BUILD: ''
      CD_CONFIG: 'workflow'
    steps:
      - name: Parse semver string
        if: ${{ fromJSON(env.CI_IS_RELEASE) }}
        continue-on-error: true
        id: semver_parser 
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: '\/v(.*)$'   

      - name: set version tag
        if: ${{ steps.semver_parser.outputs.fullversion != null }}
        run: |
          echo "CI_VERSION=${{ steps.semver_parser.outputs.major }}.${{ steps.semver_parser.outputs.minor }}.${{ steps.semver_parser.outputs.patch }}" >> $GITHUB_ENV
          echo "CI_IS_PROD=${{ steps.semver_parser.outputs.prerelease == null }}" >> $GITHUB_ENV
          echo "CI_IS_TEST=${{ steps.semver_parser.outputs.prerelease != null }}" >> $GITHUB_ENV
          echo "CI_PRERELEASE=${{ steps.semver_parser.outputs.prerelease }}" >> $GITHUB_ENV
          echo "CI_BUILD=${{ steps.semver_parser.outputs.build }}" >> $GITHUB_ENV

      - name: set cd config (preview)
        if: ${{ fromJSON(env.CI_IS_PREVIEW) }}
        run: |
          echo "CD_CONFIG=pr" >> $GITHUB_ENV

      - name: set cd config (dev)
        if: ${{ fromJSON(env.CI_IS_DEV) }}
        run: |
          echo "CD_CONFIG=dev" >> $GITHUB_ENV

      - name: set cd config (test)
        if: ${{ fromJSON(env.CI_IS_TEST) }}
        run: |
          echo "CD_CONFIG=${{ env.CI_PRERELEASE }}" >> $GITHUB_ENV

      - name: set cd config (prod)
        if: ${{ fromJSON(env.CI_IS_PROD) }}
        run: |
          echo "CD_CONFIG=prod" >> $GITHUB_ENV

      - name: set image sha
        run: echo "CI_IMAGE_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: print outputs
        run: |
          echo "CI_IMAGE_SHA: ${{ env.CI_IMAGE_SHA }}"
          echo "CI_IS_PREVIEW: ${{ env.CI_IS_PREVIEW }}"  
          echo "CI_IS_RELEASE: ${{ env.CI_IS_RELEASE }}"
          echo "CI_IS_DEV: ${{ env.CI_IS_DEV }}"  
          echo "CI_IS_TEST: ${{ env.CI_IS_TEST }}"  
          echo "CI_IS_PROD: ${{ env.CI_IS_PROD }}"  
          echo "CI_VERSION: ${{ env.CI_VERSION }}"  
          echo "CI_PRERELEASE: ${{ env.CI_PRERELEASE }}"  
          echo "CI_BUILD: ${{ env.CI_BUILD }}" 
          echo "CD_CONFIG: ${{ env.CD_CONFIG }}"

    outputs:
      image_sha: ${{ env.CI_IMAGE_SHA }}
      is_preview: ${{ env.CI_IS_PREVIEW }}
      is_release: ${{ env.CI_IS_RELEASE }}
      is_dev: ${{ env.CI_IS_DEV }}
      is_test: ${{ env.CI_IS_TEST }}
      is_prod: ${{ env.CI_IS_PROD }}
      ci_build: ${{ fromJSON(env.CI_IS_DEV) || fromJSON(env.CI_IS_PREVIEW) }}
      cd_config: ${{ env.CD_CONFIG }}
      version_no: ${{ env.CI_VERSION }}
      prerelease: ${{ env.CI_PRERELEASE }}
      build_no: ${{ env.CI_BUILD }}

  build_holder:
    if: ${{ fromJSON(needs.init.outputs.ci_build) }}
    runs-on: ubuntu-20.04
    needs:
      - init
    steps:
      - uses: actions/checkout@v2  
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - './services/holder/**'          
      - name: Build service
        if: steps.changes.outputs.src == 'true'
        uses: ./.github/actions/build_service
        id: builder
        with:
          context: './services/holder'
          image_name: ${{ github.repository_owner}}/holder_image
          registry: ghcr.io
          registry_username: ${{ github.actor}}          
          registry_password: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      image_name: ${{ steps.builder.outputs.image_name }}

  build_verifier:
    if: ${{ fromJSON(needs.init.outputs.ci_build) }}
    runs-on: ubuntu-20.04
    needs:
      - init
    steps:
      - uses: actions/checkout@v2  
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - './services/verifier/**'          
      - name: Build service
        if: steps.changes.outputs.src == 'true'
        uses: ./.github/actions/build_service
        id: builder
        with:
          context: './services/verifier'
          image_name: ${{ github.repository_owner}}/verifier_image
          registry: ghcr.io
          registry_username: ${{ github.actor}}          
          registry_password: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      image_name: ${{ steps.builder.outputs.image_name }}

  update_config:
    runs-on: ubuntu-20.04
    needs: 
      - init
      - build_holder
      - build_verifier
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    
    steps:  
      - name: print outputs
        run: |
          echo "build_holder.image_name: ${{ needs.build_holder.outputs.image_name }}"
          echo "build_verifier.image_name: ${{ needs.build_verifier.outputs.image_name }}"

      - name: Check out config repo
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}
          repository: ${{ secrets.MANIFEST_REPO }}

      - name: Set up git
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update holder image
        shell: bash
        if: needs.build_holder.outputs.image_name != null
        run: |
          yq eval '.holder.image.tag = "${{ needs.build_holder.outputs.image_name }}"' -i values-${{ needs.init.outputs.cd_config }}.yaml
          git commit -am "Update holder image tag for ${{ needs.init.outputs.cd_config }}"

      - name: Update verifier image
        shell: bash
        if: needs.build_verifier.outputs.image_name != null
        run: |
          yq eval '.verifier.image.tag = "${{ needs.build_verifier.outputs.image_name }}"' -i values-${{ needs.init.outputs.cd_config }}.yaml
          git commit -am "Update verifier image tag for ${{ needs.init.outputs.cd_config }}"

      - name: Push config changes
        shell: bash
        run: |
          git push origin




