name: build_service
on:
  workflow_call:
    inputs:
      context:
        required: true
        type: string
      image_name:
        required: true
        type: string
      registry:
        required: true
        type: string
        default: ghcr.io
      username:
        required: true
        type: string
    secrets:
      password:
        required: true

jobs:
  lint_test:
    name: lint and test the service code
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        cd ${{ inputs.context }}
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        cd ${{ inputs.context }}
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        cd ${{ inputs.context }}
        pytest tests

  build:
     # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: lint_test
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    
    steps:
      - uses: actions/checkout@v2      
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.username}}
          password: ${{ secrets.password }}

      - name: Prepare docker tags for holder image
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=ref,event=pr
            type=sha
            type=sha,format=long

      - name: Build and push holder image
        id: builder
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
